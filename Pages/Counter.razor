@page "/add"
@inject ILocalStorageService local
@inject IAppServices services 
@inject IJSRuntime js
@inject IToastService toast
@inject NavigationManager nav
@layout EmptyLayout
<PageTitle>Agregar</PageTitle>
        <div class="row m-2">
            <div class="d-flex">
                <a href="/home" class="btn btn-outline-danger border-0 shadow-none"><MudIcon Icon="@Icons.Material.Filled.ArrowBack"></MudIcon></a>
                <h5 class="my-auto">Agregar</h5>
            </div>
            <div class="d-flex justify-content-center mb-2">
                <img src="@image" width="32" />
            </div>
            <input @bind="name" placeholder="Nombre" />
            <input type="url" @bind="url" placeholder="Url" />
            <div class="d-flex justify-content-center">
                <button class="btn btn-outline-primary" @onclick="save">Guardar</button>
            </div>
        </div>

@code {
    string apiweb = "AIzaSyAM9gbk4TVOvGoZb6aG2288kSBC_1o-0Ss";
    string? user, name, url;
    string? image = "https://cdn-icons-png.flaticon.com/512/61/61205.png";
    private const int maxAllowedFiles = 2;
    private MonacoEditor? editor{ get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authprovider = new FirebaseAuthProvider(new FirebaseConfig(apiweb));
        var saved = JsonConvert.DeserializeObject<FirebaseAuth>(await local.GetItemAsync<string>("refreshtoken"));
        var refresh = await authprovider.RefreshAuthAsync(saved);
        await local.SetItemAsync("firebasetoken", JsonConvert.SerializeObject(refresh));
        user = saved!.User.DisplayName;
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "html"
            };
    }

    private async void save()
    {
        var ran = new Random();
        var id = ran.Next();
        image = $"https://s2.googleusercontent.com/s2/favicons?domain={url}&sz=32";
        if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(url))
        {
            toast.ShowError("Debe agregar los campos", "Alerta");
        }
        else
        {
            var item = new AppModel
                {
                    User = user,
                    Name = name,
                    Url = url,
                    Image = image,
                    Id = id,
                    Date = DateTime.Now
                };
            await services.InsertApps(item);
            nav.NavigateTo("home");
        }
    }

    private async Task OnChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            image = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
        }
    }
    }
